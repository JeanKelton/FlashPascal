program Cube;

{$FRAME_WIDTH 256}
{$FRAME_HEIGHT 256}
{$BACKGROUND $f5f5c0}

uses
  Flash8;

type
  TMatrix3d = class
    Values: array[0..15] of Double;
    M     : array[0..15] of Double;
    V     : array[0..15] of Double;
    x,y,z : Double;
    constructor Create;
    procedure Mult();
    procedure Translate(tx, ty, tz: Double);
    procedure RotateX(A: Double);
    procedure RotateY(A: Double);
    procedure Transform(ax, ay, az: Double);
    procedure Transform2d(ax, ay: Double);
  end;
  
  TFace = class(MovieClip)
    Size  : Integer;    
    Matrix: TMatrix3d;
    constructor Create(Parent: MovieClip; Depth, ASize: Integer; Rx, Ry: Double);
    procedure moveTo2d(x, y: Double);
    procedure lineTo2d(x, y: Double);
    procedure onEnterFrame; override;
    procedure Render; virtual;
  end;
  
  TDotedFace = class(TFace)
    Value : Integer;
    constructor Create(Parent: MovieClip; Depth, ASize: Integer; Rx, Ry: Double);
    procedure Dot(r, c: Integer);
    procedure Render; override;
  end;
  
  TLogoFace = class(TFace)
    procedure Render; override;
  end;
  
  TCube = class(MovieClip)
    Faces : array[0..5] of TFace;
  end;
  
  TDice = class(TCube)
    constructor Create(Depth, Size: Integer);
  end;
      
constructor TMatrix3d.Create;
var
  i: Integer;
begin
  for i := 0 to 15 do
    Values[i] := 0;
  Values[ 0] := 1;
  Values[ 5] := 1;
  Values[10] := 1;
  Values[15] := 1;
  for i := 0 to 15 do
    M[i] := Values[i]
end;

procedure TMatrix3d.Mult();
var
  i, j: Integer;
begin
  for i := 0 to 3 do
    for j := 0 to 3 do
      V[4 * i + j] := Values[4 * i    ] * M[     j]
                    + Values[4 * i + 1] * M[ 4 + j]
                    + Values[4 * i + 2] * M[ 8 + j]
                    + Values[4 * i + 3] * M[12 + j];
  for i := 0 to 15 do
    Values[i] := V[i];
end;

procedure TMatrix3d.Translate(tx, ty, tz: Double);
begin
  M[12] := tx;
  M[13] := ty;
  M[14] := tz;
  Mult();
  M[12] := 0;
  M[13] := 0;
  M[14] := 0;
end;

procedure TMatrix3d.RotateX(A: Double);
begin
  if A <> 0 then
  begin
    M[ 5] := cos(a);
    M[ 6] :=-sin(a);
    M[ 9] :=-M[6];
    M[10] := M[5];
    Mult();
    M[ 5] := 1;
    M[ 6] := 0;
    M[ 9] := 0;
    M[10] := 1;
  end;
end;

procedure TMatrix3d.RotateY(A: Double);
begin
  if A <> 0 then
  begin
    M[ 0] := cos(a);
    M[ 2] := sin(a);
    M[ 8] :=-M[2];
    M[10] := M[0];
    Mult();
    M[ 0] := 1;
    M[ 2] := 0;
    M[ 8] := 0;
    M[10] := 1;
  end;
end;

procedure TMatrix3d.Transform(ax, ay, az: Double);
begin
  x := ax * Values[0] + ay * Values[4] + az * Values[ 8] + Values[12];
  y := ax * Values[1] + ay * Values[5] + az * Values[ 9] + Values[13];
  z := ax * Values[2] + ay * Values[6] + az * Values[10] + Values[14];
end;

procedure TMatrix3d.Transform2d(ax, ay: Double);
begin
  x := ax * Values[0] + ay * Values[4] + {az * Values[ 8] +} Values[12];
  y := ax * Values[1] + ay * Values[5] + {az * Values[ 9] +} Values[13];
  z := ax * Values[2] + ay * Values[6] + {az * Values[10] +} Values[14];
  x := 128 * x / (128 + z / 4);
  y := 128 * y / (128 + z / 4);
end;

constructor TFace.Create(Parent: MovieClip; Depth, ASize: Integer; Rx, Ry: Double);
begin
  inherited Create(Parent, 'face' + IntToStr(Depth), Depth);
  Size  := ASize;
  Matrix := TMatrix3d.Create;
  Matrix.Translate(0, 0, ASize);
  Matrix.RotateX(Rx);
  Matrix.RotateY(Ry);
end;

procedure TFace.moveTo2d(x, y: Double);
begin
  Matrix.Transform2d(x, y);
  moveTo(Matrix.x, Matrix.y);
end;

procedure TFace.lineTo2d(x, y: Double);
begin
  Matrix.Transform2d(x, y);
  lineTo(Matrix.x, Matrix.y);
end;

procedure TFace.onEnterFrame;
begin
  Matrix.RotateX(-Math.PI / 30);
  Matrix.RotateY(+Math.PI / 60);
  Matrix.transform(0, 0, 0);
  Clear();
  if Matrix.z < 0 then
  begin
    swapDepths(- Matrix.z);
    Render;
  end;
end;

procedure TFace.Render;
begin 
  lineStyle(1, 0);
  beginFill(clWhite);
  moveTo2d(-Size, -Size);
  lineTo2d(+Size, -Size);
  lineTo2d(+Size, +Size);
  lineTo2d(-Size, +Size);
  lineTo2d(-Size, -Size);  
  endFill();
end;
 
constructor TDotedFace.Create(Parent: MovieClip; Depth, ASize: Integer; Rx, Ry: Double);
begin
  inherited Create(Parent, Depth, ASize, Rx, Ry);
  Value := Depth;
end;

procedure TDotedFace.Render;
begin
  inherited Render;
  lineStyle(0, 0);
  beginFill(0);
  if (Value and 1) > 0 then
    Dot(0, 0);
  if Value > 1 then
  begin
    Dot(-2, -2);
    Dot(+2, +2);
    if Value > 3 then
    begin
      Dot(-2, +2);
      Dot(+2, -2);
      if Value = 6 then
      begin
        Dot(-2, 0);
        Dot(+2, 0);
      end;
    end;
  end;  
  endFill();   
end;

procedure TDotedFace.Dot(r, c: Integer);
var
  w: Double;
  x1, y1: Double;
  x2, y2: Double;
begin
  w := Size / 7;
  x1 := (2 * r) * w - w;
  y1 := (2 * c) * w - w;
  x2 := x1 + 2 * w;
  y2 := y1 + 2 * w;
  moveTo2d(x1, y1);
  lineTo2d(x2, y1);
  lineTo2d(x2, y2);
  lineTo2d(x1, y2);
  lineTo2d(x1, y1);
end;

procedure TLogoFace.Render;
begin
  inherited Render;
  beginFill(clRed);
  moveTo2d(14, -7);
  lineTo2d(25, -7);
  lineTo2d(25,  7);
  lineTo2d(14,  7);
  beginFill(clBlack);
  moveTo2d(  8, 20);
  lineTo2d(  8, 10);
  lineTo2d(-20,-10);
  lineTo2d(-20,-20);
  moveTo2d(-20, 20);
  lineTo2d(-25, 18);
  lineTo2d( 10,-10);
  lineTo2d( 10,-20);
end;
 
constructor TDice.Create(Depth, Size: Integer);
begin
  inherited Create(nil, 'cube' + IntToStr(Depth), Depth);
  _x := 128;
  _y := 128;
  Faces[0] := TLogoFace.Create(Self, 1, Size, 0  , 0);
  Faces[1] := TDotedFace.Create(Self, 2, Size, Math.PI/2, 0);
  Faces[2] := TDotedFace.Create(Self, 6, Size, Math.PI  , 0);
  Faces[3] := TDotedFace.Create(Self, 5, Size,-Math.PI/2, 0);
  Faces[4] := TDotedFace.Create(Self, 4, Size, 0, +Math.PI/2);
  Faces[5] := TDotedFace.Create(Self, 3, Size, 0, -Math.PI/2);
end;

var
  Dice: TDice;
begin
  Dice := TDice.Create(1, 30);
  Dice._x := 64;
  
  Dice := TDice.Create(2, 30);
  Dice._x := 150;
  Dice._xscale := 75;
  Dice._yscale := 75;

  Dice := TDice.Create(3, 30);
  Dice._x := 220;
  Dice._xscale := 35;
  Dice._yscale := 35;
end.